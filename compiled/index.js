class t{ops;input;constructor(e,o=[]){this.ops=o,this.input=t.makeIterator(e)}static makeIterator(t){return Array.isArray(t)?t[Symbol.iterator]():t}map(t){return this.ops.push({type:"map",op:t}),this}filter(t){return this.ops.push({type:"filter",op:t}),this}forEach(t){return this.ops.push({type:"foreach",op:t}),this}inspect(t){return this.ops.push({type:"foreach",op:t}),this}filterMap(t){return this.ops.push({type:"filterMap",op:t}),this}take(t){return this.ops.push({type:"take",count:t}),this}skip(t){return this.ops.push({type:"skip",count:t}),this}stepBy(e){const o=this.collect();return new t(function*(){let t=0;for(const n of o)t%e==0&&(yield n),t++}(),this.ops)}chain(e){const o=this.collect();return new t(function*(){for(const t of o)yield t;for(const t of e)yield t}(),[])}intersperse(e){const o=this.collect(),n=t.makeIterator(o);return new t(function*(){let t=0;for(;;){const r=n.next();if(yield r.value,r.done||Array.isArray(o)&&t==o.length-1)break;const s="function"==typeof e?e():e;yield s,t++}}(),[])}zip(e){const o=this.collect();return new t(function*(){const n=t.makeIterator(e);for(const t of o){const e=n.next();if(e.done)break;yield[t,e.value]}}(),[])}enumerate(){const e=this.collect();return new t(function*(){for(let t=0;t<e.length;t++)yield[t,e[t]]}(),[])}flatMap(e){const o=this.collect();return new t(function*(){for(const t of o){const o=e(t);for(const t of o)yield t}}(),[])}fuse(){const e=this.collect();return new t(function*(){for(const t of e){if(null==t)break;yield t}}(),[])}count(){return this.collect().length}nth(t){const e=this.collect();return t<e.length?e[t]:null}reduce(t,e){const o=this.collect();let n=e;for(const e of o)n=t(n,e);return n}reduceRight(t,e){const o=this.collect();let n=e;for(let e=o.length-1;e>=0;e--){n=t(n,o[e])}return n}flat(t){return this.collect().flat(t)}any(t){for(const e of this.collect())if(t(e))return!0;return!1}all(t){for(const e of this.collect())if(!t(e))return!1;return!0}find(t){for(const e of this.collect())if(t(e))return e;return null}findIndex(t){const e=this.collect();for(let o=0;o<e.length;o++)if(t(e[o]))return o;return-1}findLast(t){const e=this.collect();for(let o=e.length-1;o>=0;o--)if(t(e[o]))return e[o];return null}findLastIndex(t){const e=this.collect();for(let o=e.length-1;o>=0;o--)if(t(e[o]))return o;return-1}includes(t){const e=this.collect();for(let o=0;o<e.length;o++)if(e[o]===t)return!0;return!1}partition(t){const e=this.collect(),o=[],n=[];for(const r of e)t(r)?o.push(r):n.push(r);return[o,n]}collect(){const e=[];let o=0;t:for(const n of this.input){let r,s=n;for(let n=0;n<this.ops.length;n++){const c=this.ops[n];switch(c.type){case"skip":for(let t=0;t<c.count-1;t++)this.input.next();this.ops.splice(n,1);continue t;case"take":if(o>=c.count)return new t(e,this.ops.slice(n+2)).collect();break;case"filter":if(!1===c.op(s))continue t;break;case"map":s=c.op(s);break;case"foreach":c.op(s);break;case"filterMap":if(r=c.op(s),null===r||!1===r||void 0===r)continue t;s=r}}e.push(s),o++}return e}}export{t as ArrayStream};
//# sourceMappingURL=bundle.min.js.map
